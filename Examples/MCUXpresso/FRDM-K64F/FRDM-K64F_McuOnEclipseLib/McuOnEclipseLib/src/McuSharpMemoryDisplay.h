/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : McuSharpMemoryDisplay.h
**     Project     : FRDM-K64F_Generator
**     Processor   : MK64FN1M0VLL12
**     Component   : SharpMemDisplay
**     Version     : Component 01.010, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-07-03, 08:21, # CodeGen: 331
**     Abstract    :
**
**     Settings    :
**          Component name                                 : McuSharpMemoryDisplay
**          Properties                                     : 
**            Width                                        : 96
**            Height                                       : 96
**            Bytes in rows                                : yes
**            Bytes in x direction                         : yes
**            MSB first                                    : yes
**            Bits per pixel                               : 1
**            Window capability                            : no
**            Display Memory Write                         : no
**          Invert Display                                 : no
**          CS                                             : SCE
**          HW non-LDD                                     : Enabled
**            SPI                                          : Enabled
**              SPI                                        : McuGenericSWSPI
**          HW LDD                                         : Disabled
**          System                                         : 
**            Wait                                         : McuWait
**            Initialize on Init                           : yes
**     Contents    :
**         GetWidth              - McuSharpMemoryDisplay_PixelDim McuSharpMemoryDisplay_GetWidth(void);
**         GetHeight             - McuSharpMemoryDisplay_PixelDim McuSharpMemoryDisplay_GetHeight(void);
**         GetLongerSide         - McuSharpMemoryDisplay_PixelDim McuSharpMemoryDisplay_GetLongerSide(void);
**         GetShorterSide        - McuSharpMemoryDisplay_PixelDim McuSharpMemoryDisplay_GetShorterSide(void);
**         SetDisplayOrientation - void McuSharpMemoryDisplay_SetDisplayOr...
**         GetDisplayOrientation - McuSharpMemoryDisplay_DisplayOrientation...
**         Clear                 - void McuSharpMemoryDisplay_Clear(void);
**         UpdateLine            - void McuSharpMemoryDisplay_UpdateLine(uint8_t line, uint8_t *dataP);
**         UpdateFull            - void McuSharpMemoryDisplay_UpdateFull(void);
**         UpdateRegion          - void McuSharpMemoryDisplay_UpdateRegion(McuSharpMemoryDisplay_PixelDim x,...
**         ToggleVCOM            - void McuSharpMemoryDisplay_ToggleVCOM(void);
**         GetLCD                - void McuSharpMemoryDisplay_GetLCD(void);
**         GiveLCD               - void McuSharpMemoryDisplay_GiveLCD(void);
**         Init                  - void McuSharpMemoryDisplay_Init(void);
**         Deinit                - void McuSharpMemoryDisplay_Deinit(void);
**
** * Copyright (c) 2016-2017, Erich Styger
**  * Web:         https://mcuoneclipse.com
**  * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**  * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**  * All rights reserved.
**  *
**  * Redistribution and use in source and binary forms, with or without modification,
**  * are permitted provided that the following conditions are met:
**  *
**  * - Redistributions of source code must retain the above copyright notice, this list
**  *   of conditions and the following disclaimer.
**  *
**  * - Redistributions in binary form must reproduce the above copyright notice, this
**  *   list of conditions and the following disclaimer in the documentation and/or
**  *   other materials provided with the distribution.
**  *
**  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file McuSharpMemoryDisplay.h
** @version 01.00
** @brief
**
*/         
/*!
**  @addtogroup McuSharpMemoryDisplay_module McuSharpMemoryDisplay module documentation
**  @{
*/         


#ifndef __McuSharpMemoryDisplay_H
#define __McuSharpMemoryDisplay_H

/* MODULE McuSharpMemoryDisplay. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "SCEpin1.h"
#include "McuGenericSWSPI.h"
#include "McuWait.h"
#include "McuLib.h"

#include "Cpu.h"

#define McuSharpMemoryDisplay_DISPLAY_HW_NOF_COLUMNS  96u /* number of columns in hardware */
#define McuSharpMemoryDisplay_DISPLAY_HW_NOF_ROWS     96u /* number of rows in hardware */

extern uint8_t McuSharpMemoryDisplay_DisplayBuf[McuSharpMemoryDisplay_DISPLAY_HW_NOF_ROWS][((McuSharpMemoryDisplay_DISPLAY_HW_NOF_COLUMNS-1)/8)+1]; /* buffer for the display */

#ifndef __BWUserType_McuSharpMemoryDisplay_PixelCount
#define __BWUserType_McuSharpMemoryDisplay_PixelCount
  typedef int16_t McuSharpMemoryDisplay_PixelCount ; /* A word is enough to hold the number of pixels (84x48). */
#endif
#ifndef __BWUserType_McuSharpMemoryDisplay_PixelDim
#define __BWUserType_McuSharpMemoryDisplay_PixelDim
  typedef uint8_t McuSharpMemoryDisplay_PixelDim ; /* One byte is enough to describe an x/y position. */
#endif

typedef bool McuSharpMemoryDisplay_PixelColor; /* one bit is enough to describe the color as we have a monochrome display */

#define McuSharpMemoryDisplay_PIXEL_BLACK  0 /* 0 is a black pixel */
#define McuSharpMemoryDisplay_PIXEL_WHITE  1 /* 1 is a white pixel */
#define McuSharpMemoryDisplay_COLOR_PIXEL_SET      McuSharpMemoryDisplay_PIXEL_WHITE /* color for a pixel set */
#define McuSharpMemoryDisplay_COLOR_PIXEL_CLR      McuSharpMemoryDisplay_PIXEL_BLACK /* color for a pixel cleared */
#define McuSharpMemoryDisplay_COLOR_BLACK          McuSharpMemoryDisplay_PIXEL_BLACK
#define McuSharpMemoryDisplay_COLOR_WHITE          McuSharpMemoryDisplay_PIXEL_WHITE
#define McuSharpMemoryDisplay_COLOR_RED            McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_BRIGHT_RED     McuSharpMemoryDisplay_COLOR_WHITE
#define McuSharpMemoryDisplay_COLOR_DARK_RED       McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_GREEN          McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_BRIGHT_GREEN   McuSharpMemoryDisplay_COLOR_WHITE
#define McuSharpMemoryDisplay_COLOR_DARK_GREEN     McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_BLUE           McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_BRIGHT_BLUE    McuSharpMemoryDisplay_COLOR_WHITE
#define McuSharpMemoryDisplay_COLOR_DARK_BLUE      McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_YELLOW         McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_BRIGHT_YELLOW  McuSharpMemoryDisplay_COLOR_WHITE
#define McuSharpMemoryDisplay_COLOR_ORANGE         McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_GREY           McuSharpMemoryDisplay_COLOR_BLACK
#define McuSharpMemoryDisplay_COLOR_BRIGHT_GREY    McuSharpMemoryDisplay_COLOR_WHITE

typedef enum {
  McuSharpMemoryDisplay_ORIENTATION_PORTRAIT    = 0,
  McuSharpMemoryDisplay_ORIENTATION_PORTRAIT180 = 1,
  McuSharpMemoryDisplay_ORIENTATION_LANDSCAPE   = 2,
  McuSharpMemoryDisplay_ORIENTATION_LANDSCAPE180= 3
} McuSharpMemoryDisplay_DisplayOrientation;

#define McuSharpMemoryDisplay_HW_WIDTH         96u /* width of display in pixels */
#define McuSharpMemoryDisplay_HW_HEIGHT        96u /* height of display in pixels */

#define McuSharpMemoryDisplay_HW_SHORTER_SIDE  96u /* size of shorter display side in pixels */
#define McuSharpMemoryDisplay_HW_LONGER_SIDE   96u /* size of longer display side in pixels */



void McuSharpMemoryDisplay_Clear(void);
/*
** ===================================================================
**     Method      :  Clear (component SharpMemDisplay)
**
**     Description :
**         Clears the whole display memory.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuSharpMemoryDisplay_Init(void);
/*
** ===================================================================
**     Method      :  Init (component SharpMemDisplay)
**
**     Description :
**         Display driver initialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuSharpMemoryDisplay_UpdateRegion(McuSharpMemoryDisplay_PixelDim x, McuSharpMemoryDisplay_PixelDim y, McuSharpMemoryDisplay_PixelDim w, McuSharpMemoryDisplay_PixelDim h);
/*
** ===================================================================
**     Method      :  UpdateRegion (component SharpMemDisplay)
**
**     Description :
**         Updates a region of the display
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x coordinate
**         y               - y coordinate
**         w               - width of the region
**         h               - height of the region
**     Returns     : Nothing
** ===================================================================
*/

void McuSharpMemoryDisplay_UpdateFull(void);
/*
** ===================================================================
**     Method      :  UpdateFull (component SharpMemDisplay)
**
**     Description :
**         Updates the whole display
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

McuSharpMemoryDisplay_DisplayOrientation McuSharpMemoryDisplay_GetDisplayOrientation(void);
/*
** ===================================================================
**     Method      :  GetDisplayOrientation (component SharpMemDisplay)
**
**     Description :
**         Returns the current display orientation
**     Parameters  : None
**     Returns     :
**         ---             - current display orientation
** ===================================================================
*/

#define McuSharpMemoryDisplay_GetWidth() \
  McuSharpMemoryDisplay_HW_WIDTH

/*
** ===================================================================
**     Method      :  GetWidth (component SharpMemDisplay)
**
**     Description :
**         Returns the width of the display in pixels
**     Parameters  : None
**     Returns     :
**         ---             - width of display
** ===================================================================
*/

#define McuSharpMemoryDisplay_GetHeight() \
  McuSharpMemoryDisplay_HW_HEIGHT

/*
** ===================================================================
**     Method      :  GetHeight (component SharpMemDisplay)
**
**     Description :
**         Returns the height of the display in pixels
**     Parameters  : None
**     Returns     :
**         ---             - height of display
** ===================================================================
*/

#define McuSharpMemoryDisplay_GetLongerSide() \
  McuSharpMemoryDisplay_HW_LONGER_SIDE

/*
** ===================================================================
**     Method      :  GetLongerSide (component SharpMemDisplay)
**
**     Description :
**         Returns the longer side of the display in pixels
**     Parameters  : None
**     Returns     :
**         ---             - longer side of display
** ===================================================================
*/

#define McuSharpMemoryDisplay_GetShorterSide() \
  McuSharpMemoryDisplay_HW_SHORTER_SIDE

/*
** ===================================================================
**     Method      :  GetShorterSide (component SharpMemDisplay)
**
**     Description :
**         Returns the shorter side of the display in pixels
**     Parameters  : None
**     Returns     :
**         ---             - shorter side of display
** ===================================================================
*/

void McuSharpMemoryDisplay_SetDisplayOrientation(McuSharpMemoryDisplay_DisplayOrientation newOrientation);
/*
** ===================================================================
**     Method      :  SetDisplayOrientation (component SharpMemDisplay)
**
**     Description :
**         Sets current display orientation
**     Parameters  :
**         NAME            - DESCRIPTION
**         newOrientation  - the new orientation
**                           for the display
**     Returns     : Nothing
** ===================================================================
*/

void McuSharpMemoryDisplay_GetLCD(void);
/*
** ===================================================================
**     Method      :  GetLCD (component SharpMemDisplay)
**
**     Description :
**         Method to be called for mutual exclusive access to the LCD
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuSharpMemoryDisplay_GiveLCD(void);
/*
** ===================================================================
**     Method      :  GiveLCD (component SharpMemDisplay)
**
**     Description :
**         Method to be called for mutual exclusive access to the LCD
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuSharpMemoryDisplay_Deinit(void);
/*
** ===================================================================
**     Method      :  Deinit (component SharpMemDisplay)
**
**     Description :
**         Module Deinitialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuSharpMemoryDisplay_UpdateLine(uint8_t line, uint8_t *dataP);
/*
** ===================================================================
**     Method      :  UpdateLine (component SharpMemDisplay)
**
**     Description :
**         Updates a single line on the LCD
**     Parameters  :
**         NAME            - DESCRIPTION
**         line            - Line number to update, range 0-93
**       * dataP           - Pointer to data, must be array of 12
**                           bytes (96 pixels)
**     Returns     : Nothing
** ===================================================================
*/

void McuSharpMemoryDisplay_ToggleVCOM(void);
/*
** ===================================================================
**     Method      :  ToggleVCOM (component SharpMemDisplay)
**
**     Description :
**         Command used if EXTMODE=L. This function toggles the VCOM if
**         no other command is executed
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END McuSharpMemoryDisplay. */

#endif
/* ifndef __McuSharpMemoryDisplay_H */
/*!
** @}
*/
