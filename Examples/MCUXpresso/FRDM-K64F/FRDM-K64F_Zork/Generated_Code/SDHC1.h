/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : SDHC1.h
**     Project     : FRDM-K64F_Zork
**     Processor   : MK64FN1M0VLQ12
**     Component   : SDHC_LDD
**     Version     : Component 00.001, Driver 01.04, CPU db: 3.00.000
**     Repository  : Kinetis
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-12-02, 21:22, # CodeGen: 12
**     Abstract    :
**          This component implements a SD host controller driver 
**          interface. Handles control and data transfers to/from
**          SD and MMC cards.
**     Settings    :
**          Component name                                 : SDHC1
**          Device                                         : SDHC
**          Settings                                       : 
**            Interface                                    : 4-bit data mode
**            Bus clock                                    : 375 kHz
**            Data timeout exponent                        : 27
**            DMA                                          : 
**              Read watermark                             : 16
**              Write watermark                            : 16
**            Buffers                                      : 
**              Transfer buffer table size                 : 8
**          Interrupt service/event                        : Enabled
**            SDHC                                         : INT_SDHC
**            SDHC priority                                : 16
**          Pins                                           : 4-bit data mode
**            CLK pin                                      : ADC0_DP2/ADC1_SE6a/PTE2/LLWU_P1/SPI1_SCK/UART1_CTS_b/SDHC0_DCLK/TRACE_D2
**            CMD pin                                      : ADC0_DM2/ADC1_SE7a/PTE3/SPI1_SIN/UART1_RTS_b/SDHC0_CMD/TRACE_D1/SPI1_SOUT
**            Data                                         : 
**              DAT0 pin                                   : ADC1_SE5a/PTE1/LLWU_P0/SPI1_SOUT/UART1_RX/SDHC0_D0/TRACE_D3/I2C1_SCL/SPI1_SIN
**              DAT1                                       : Enabled
**                DAT1 pin                                 : ADC1_SE4a/PTE0/SPI1_PCS1/UART1_TX/SDHC0_D1/TRACE_CLKOUT/I2C1_SDA/RTC_CLKOUT
**              DAT2                                       : Enabled
**                DAT2 pin                                 : PTE5/SPI1_PCS2/UART3_RX/SDHC0_D2/FTM3_CH0
**              DAT3                                       : Enabled
**                DAT3 pin                                 : PTE4/LLWU_P2/SPI1_PCS0/UART3_TX/SDHC0_D3/TRACE_D0
**          Initialization                                 : 
**            Enable device                                : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnCardInserted                             : Enabled
**              OnCardRemoved                              : Enabled
**              OnFinished                                 : Enabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init               - LDD_TDeviceData* SDHC1_Init(LDD_TUserData *UserDataPtr);
**         Deinit             - void SDHC1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         Enable             - LDD_TError SDHC1_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable            - LDD_TError SDHC1_Disable(LDD_TDeviceData *DeviceDataPtr);
**         SetEventMask       - LDD_TError SDHC1_SetEventMask(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask...
**         GetEventMask       - LDD_TEventMask SDHC1_GetEventMask(LDD_TDeviceData *DeviceDataPtr);
**         DetectCards        - LDD_TError SDHC1_DetectCards(LDD_TDeviceData *DeviceDataPtr);
**         SelectCard         - LDD_TError SDHC1_SelectCard(LDD_TDeviceData *DeviceDataPtr, uint8_t Id);
**         GetCardInfo        - LDD_TError SDHC1_GetCardInfo(LDD_TDeviceData *DeviceDataPtr,...
**         TransferBlocks     - LDD_TError SDHC1_TransferBlocks(LDD_TDeviceData *DeviceDataPtr,...
**         EraseBlocks        - LDD_TError SDHC1_EraseBlocks(LDD_TDeviceData *DeviceDataPtr, uint32_t...
**         SetDataWidth       - LDD_TError SDHC1_SetDataWidth(LDD_TDeviceData *DeviceDataPtr, uint8_t Width);
**         SelectBusClock     - LDD_TError SDHC1_SelectBusClock(LDD_TDeviceData *DeviceDataPtr,...
**         SetVoltage         - LDD_TError SDHC1_SetVoltage(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TVoltage...
**         SetWriteProtection - LDD_TError SDHC1_SetWriteProtection(LDD_TDeviceData *DeviceDataPtr,...
**         GetWriteProtection - LDD_TError SDHC1_GetWriteProtection(LDD_TDeviceData *DeviceDataPtr, uint32_t...
**         CancelOperation    - LDD_TError SDHC1_CancelOperation(LDD_TDeviceData *DeviceDataPtr);
**         GetStatus          - LDD_SDHC_TStatus SDHC1_GetStatus(LDD_TDeviceData *DeviceDataPtr);
**         GetError           - LDD_SDHC_TError SDHC1_GetError(LDD_TDeviceData *DeviceDataPtr, uint32_t...
**         ConnectPin         - LDD_TError SDHC1_ConnectPin(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask...
**         SetOperationMode   - LDD_TError SDHC1_SetOperationMode(LDD_TDeviceData *DeviceDataPtr,...
**         GetDriverState     - LDD_TDriverState SDHC1_GetDriverState(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file SDHC1.h
** @version 01.04
** @brief
**          This component implements a SD host controller driver 
**          interface. Handles control and data transfers to/from
**          SD and MMC cards.
*/         
/*!
**  @addtogroup SDHC1_module SDHC1 module documentation
**  @{
*/         

#ifndef __SDHC1_H
#define __SDHC1_H

/* MODULE SDHC1 */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define SDHC1_PRPH_BASE_ADDRESS  0x400B1000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define SDHC1_Init_METHOD_ENABLED      /*!< Init method of the component SDHC1 is enabled (generated) */
#define SDHC1_Deinit_METHOD_ENABLED    /*!< Deinit method of the component SDHC1 is enabled (generated) */
#define SDHC1_Enable_METHOD_ENABLED    /*!< Enable method of the component SDHC1 is enabled (generated) */
#define SDHC1_Disable_METHOD_ENABLED   /*!< Disable method of the component SDHC1 is enabled (generated) */
#define SDHC1_SetEventMask_METHOD_ENABLED /*!< SetEventMask method of the component SDHC1 is enabled (generated) */
#define SDHC1_GetEventMask_METHOD_ENABLED /*!< GetEventMask method of the component SDHC1 is enabled (generated) */
#define SDHC1_DetectCards_METHOD_ENABLED /*!< DetectCards method of the component SDHC1 is enabled (generated) */
#define SDHC1_SelectCard_METHOD_ENABLED /*!< SelectCard method of the component SDHC1 is enabled (generated) */
#define SDHC1_GetCardInfo_METHOD_ENABLED /*!< GetCardInfo method of the component SDHC1 is enabled (generated) */
#define SDHC1_TransferBlocks_METHOD_ENABLED /*!< TransferBlocks method of the component SDHC1 is enabled (generated) */
#define SDHC1_EraseBlocks_METHOD_ENABLED /*!< EraseBlocks method of the component SDHC1 is enabled (generated) */
#define SDHC1_SetDataWidth_METHOD_ENABLED /*!< SetDataWidth method of the component SDHC1 is enabled (generated) */
#define SDHC1_SelectBusClock_METHOD_ENABLED /*!< SelectBusClock method of the component SDHC1 is enabled (generated) */
#define SDHC1_SetVoltage_METHOD_ENABLED /*!< SetVoltage method of the component SDHC1 is enabled (generated) */
#define SDHC1_SetWriteProtection_METHOD_ENABLED /*!< SetWriteProtection method of the component SDHC1 is enabled (generated) */
#define SDHC1_GetWriteProtection_METHOD_ENABLED /*!< GetWriteProtection method of the component SDHC1 is enabled (generated) */
#define SDHC1_CancelOperation_METHOD_ENABLED /*!< CancelOperation method of the component SDHC1 is enabled (generated) */
#define SDHC1_GetStatus_METHOD_ENABLED /*!< GetStatus method of the component SDHC1 is enabled (generated) */
#define SDHC1_GetError_METHOD_ENABLED  /*!< GetError method of the component SDHC1 is enabled (generated) */
#define SDHC1_ConnectPin_METHOD_ENABLED /*!< ConnectPin method of the component SDHC1 is enabled (generated) */
#define SDHC1_SetOperationMode_METHOD_ENABLED /*!< SetOperationMode method of the component SDHC1 is enabled (generated) */
#define SDHC1_GetDriverState_METHOD_ENABLED /*!< GetDriverState method of the component SDHC1 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define SDHC1_OnCardInserted_EVENT_ENABLED /*!< OnCardInserted event of the component SDHC1 is enabled (generated) */
#define SDHC1_OnCardRemoved_EVENT_ENABLED /*!< OnCardRemoved event of the component SDHC1 is enabled (generated) */
#define SDHC1_OnFinished_EVENT_ENABLED /*!< OnFinished event of the component SDHC1 is enabled (generated) */


#define SDHC1_NO_CARD 1                /* Special card ID for the SelectCard method indicating that no card should be selected (unselect all). */

typedef enum {
  SDHC1_BUS_CLOCK_375kHz,
  SDHC1_BUS_CLOCK_20MHz,
  SDHC1_BUS_CLOCK_60MHz
} SDHC1_TBusClock;

/*
** ===================================================================
**     Method      :  SDHC1_Init (component SDHC_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property <"Enable device"> is set to "yes" then the device
**         is also enabled (see the description of the <Enable> method).
**         In this case the <Enable> method is not necessary and need
**         not to be generated. This method can be called only once.
**         Before the second call of Init the <Deinit> method must be
**         called first.
**     @param
**         UserDataPtr     - Pointer to user data
**                           structure pointer.
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* SDHC1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_Deinit (component SDHC_LDD)
*/
/*!
**     @brief
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupt vectors, etc.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
*/
/* ===================================================================*/
void SDHC1_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_Enable (component SDHC_LDD)
*/
/*!
**     @brief
**         Enables the component.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
*/
/* ===================================================================*/
LDD_TError SDHC1_Enable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_Disable (component SDHC_LDD)
*/
/*!
**     @brief
**         Disables the component.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
*/
/* ===================================================================*/
LDD_TError SDHC1_Disable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_SetEventMask (component SDHC_LDD)
*/
/*!
**     @brief
**         Sets event mask.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         EventMask       - Event mask
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_PARAM_MASK - Invalid mask (one or more
**                           event is unmaskable)
*/
/* ===================================================================*/
LDD_TError SDHC1_SetEventMask(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask);

/*
** ===================================================================
**     Method      :  SDHC1_GetEventMask (component SDHC_LDD)
*/
/*!
**     @brief
**         Returns event mask.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @return
**                         - Current event mask.
*/
/* ===================================================================*/
LDD_TEventMask SDHC1_GetEventMask(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_DetectCards (component SDHC_LDD)
*/
/*!
**     @brief
**         Detects newly inserted and removed cards. The OnCardInserted
**         event will be called for every new card and the
**         OnCardRemoved event will be called for every removed card.
**         This method should be used when card detection pin is not
**         available.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Card detection started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
*/
/* ===================================================================*/
LDD_TError SDHC1_DetectCards(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_SelectCard (component SDHC_LDD)
*/
/*!
**     @brief
**         Selects a card by its identification number. All further
**         operations will apply to this card. Special card
**         identification number <compId>_NO_CARD will deselect the
**         active card.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         Id              - Card identification number passed by the
**                           OnCardInserted event parameter.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Card selection started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
**                           ERR_PARAM_ID - Invalid card ID
*/
/* ===================================================================*/
LDD_TError SDHC1_SelectCard(LDD_TDeviceData *DeviceDataPtr, uint8_t Id);

/*
** ===================================================================
**     Method      :  SDHC1_GetCardInfo (component SDHC_LDD)
*/
/*!
**     @brief
**         Returns card information about the selected card. Method
**         call starts the card information retrieval process. After
**         the card information has been received, the OnFinished event
**         is called (the component state changes to idle) and the
**         information is stored in the specified variable.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         InfoPtr         - Pointer to a variable, where card
**                           information will be stored.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Card information retrieval started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
*/
/* ===================================================================*/
LDD_TError SDHC1_GetCardInfo(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TCardInfo *InfoPtr);

/*
** ===================================================================
**     Method      :  SDHC1_TransferBlocks (component SDHC_LDD)
*/
/*!
**     @brief
**         Initiates a data block transfer on the selected card.
**         Transfer can be a read or write operation depending on the
**         transfer operation parameter. Read operation reads data
**         blocks from the specified address on a memory card and
**         stores their content into buffers specified by the buffer
**         descriptor list. Write operation writes data blocks
**         specified by the buffer descriptor list to a card memory on
**         the specified address. Data blocks should be the same size
**         and the block size should be supported by the memory card.
**         Buffer addresses should be aligned to a hardware specific
**         address boundary.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         Operation       - Transfer operation
**     @param
**         Address         - Card memory address. Byte address
**                           in case of standard capacity memory cards,
**                           512 byte block number in case of high
**                           capacity memory cards.
**     @param
**         BufferDescListPtr - Pointer to
**                           data block buffer descriptor list.
**     @param
**         BufferDescCount - Data block buffer
**                           descriptor list item count
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Transfer started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
**                           ERR_PARAM_ADDRESS - Invalid buffer address
**                           (one or more buffer address from the list
**                           of buffer descriptors is misaligned)
**                           ERR_PARAM_BUFFER_COUNT - Buffer count
**                           exceeds the internal buffer table size
*/
/* ===================================================================*/
LDD_TError SDHC1_TransferBlocks(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TTransferOperation Operation, uint32_t Address, LDD_SDHC_TBufferDesc *BufferDescListPtr, uint16_t BufferDescCount);

/*
** ===================================================================
**     Method      :  SDHC1_EraseBlocks (component SDHC_LDD)
*/
/*!
**     @brief
**         Initiates a memory area erasion on the selected card. Erase
**         operation erases a memory area of the specified size from
**         the specified address on a memory card.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         Address         - Address of the beginning of the
**                           erased area. Byte address in case of
**                           standard capacity memory card and 512 byte
**                           block number in case of high capacity
**                           memory card.
**     @param
**         Size            - Size of the erased area. Byte size in
**                           case of standard capacity memory card and
**                           512 byte blocks count in case of high
**                           capacity memory card.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Erasing started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
*/
/* ===================================================================*/
LDD_TError SDHC1_EraseBlocks(LDD_TDeviceData *DeviceDataPtr, uint32_t Address, uint32_t Size);

/*
** ===================================================================
**     Method      :  SDHC1_SetDataWidth (component SDHC_LDD)
*/
/*!
**     @brief
**         Initiates a data width setup. The card has to support the
**         specified data width.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         Width           - Data bus bit count.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Setup started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
**                           ERR_PARAM_WIDTH - Invalid data width
*/
/* ===================================================================*/
LDD_TError SDHC1_SetDataWidth(LDD_TDeviceData *DeviceDataPtr, uint8_t Width);

/*
** ===================================================================
**     Method      :  SDHC1_SelectBusClock (component SDHC_LDD)
*/
/*!
**     @brief
**         Initiates a SD bus clock frequency change. If the frequency
**         is for high speed mode, initiates a high speed mode setup on
**         the selected card. The card has to support the specified bus
**         clock frequency. This method is enabled only if a list of
**         bus clock frequencies is specified.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         Frequency       - Bus clock frequency identifier.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Setup started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
*/
/* ===================================================================*/
LDD_TError SDHC1_SelectBusClock(LDD_TDeviceData *DeviceDataPtr, SDHC1_TBusClock Frequency);

/*
** ===================================================================
**     Method      :  SDHC1_SetVoltage (component SDHC_LDD)
*/
/*!
**     @brief
**         Initiates a bus voltage change. The card has to support the
**         specified voltage.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         Voltage         - Voltage identifier.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Setup started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
*/
/* ===================================================================*/
LDD_TError SDHC1_SetVoltage(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TVoltage Voltage);

/*
** ===================================================================
**     Method      :  SDHC1_SetWriteProtection (component SDHC_LDD)
*/
/*!
**     @brief
**         Initiates a write protection setup for the selected card. If
**         the write protection type is LDD_SDHC_GROUP, write
**         protection will be set for the addressed write protection
**         group. Write protection group size is contained within the
**         card information structure. If the write protection type is
**         LDD_SDHC_CARD, write protection will be set for the whole
**         card and the address parameter will be ignored. Only a whole
**         card write protection clear can remove this protection. The
**         card has to support write protection.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         Type            - Write protection type.
**     @param
**         Address         - Address of the write protection
**                           group, if the write protection type is
**                           LDD_SDHC_GROUP. Byte address in case of
**                           standard capacity memory card and 512 byte
**                           block number in case of high capacity
**                           memory card.
**     @param
**         Protected       - Indicates whether the
**                           addressed write protection group or card
**                           should be write protected or not.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Setup started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
*/
/* ===================================================================*/
LDD_TError SDHC1_SetWriteProtection(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TWriteProtectType Type, uint32_t Address, bool Protected);

/*
** ===================================================================
**     Method      :  SDHC1_GetWriteProtection (component SDHC_LDD)
*/
/*!
**     @brief
**         Initiates a write protection mask retrieval for the selected
**         card. After the mask has been received, the OnFinished event
**         is called and the mask is stored in the specified variable.
**         The returned mask contains a bit mask of write protected
**         write protection groups starting at the specified address.
**         The least significant bit represents the status of the first
**         write protection group. Bits of write protection groups out
**         of range are cleared. The card has to support write
**         protection.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         Address         - Address of the write protection
**                           group. Byte address in case of standard
**                           capacity memory card and 512 byte block
**                           number in case of high capacity memory card.
**     @param
**         MaskPtr         - Pointer to a variable, where the
**                           write protection groups status mask will be
**                           stored.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Write protection mask retrieval
**                           started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_BUSY - Another card operation is in
**                           progress
*/
/* ===================================================================*/
LDD_TError SDHC1_GetWriteProtection(LDD_TDeviceData *DeviceDataPtr, uint32_t Address, uint32_t *MaskPtr);

/*
** ===================================================================
**     Method      :  SDHC1_CancelOperation (component SDHC_LDD)
*/
/*!
**     @brief
**         Initiates a cancelation of the ongoing operation. The
**         OnFinished event will be called for the stopped operation.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - Operation cancelation started
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_NOTAVAIL - No operation is in progress
*/
/* ===================================================================*/
LDD_TError SDHC1_CancelOperation(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_GetStatus (component SDHC_LDD)
*/
/*!
**     @brief
**         Returns the current component status, specifying the ongoing
**         operation.
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @return
**                         -  Component status.
*/
/* ===================================================================*/
LDD_SDHC_TStatus SDHC1_GetStatus(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_GetError (component SDHC_LDD)
*/
/*!
**     @brief
**         Returns the last error code and the memory address where the
**         error occurred (if applicable).
**     @param
**         DeviceDataPtr   - Pointer to the device
**                           data structure.
**     @param
**         AddressPtr      - Pointer to a variable, where
**                           the error address will be stored.
**     @return
**                         -  The last error code.
*/
/* ===================================================================*/
LDD_SDHC_TError SDHC1_GetError(LDD_TDeviceData *DeviceDataPtr, uint32_t *AddressPtr);

/*
** ===================================================================
**     Method      :  SDHC1_ConnectPin (component SDHC_LDD)
*/
/*!
**     @brief
**         This method reconnects the requested pins associated with
**         the selected peripheral in the component. This method is
**         only available for CPU derivatives and peripherals that
**         support the runtime pin sharing with other internal on-chip
**         peripherals.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure.
**     @param
**         PinMask         - Mask for the requested pins. The
**                           peripheral pins are reconnected according
**                           to this mask.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
**                           ERR_PARAM_MASK - Invalid pin mask
*/
/* ===================================================================*/
LDD_TError SDHC1_ConnectPin(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask);

/*
** ===================================================================
**     Method      :  SDHC1_SetOperationMode (component SDHC_LDD)
*/
/*!
**     @brief
**         This method requests to change the component's operation
**         mode. Upon a request to change the operation mode, the
**         component will finish a pending job first and then notify a
**         caller that an operation mode has been changed. When no job
**         is pending (ERR_OK), the component changes an operation mode
**         immediately and notify a caller about this change. 
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by Init method. 
**     @param
**         OperationMode   - Requested driver
**                           operation mode.
**     @param
**         ModeChangeCallback - Callback to
**                           notify the upper layer once a mode has been
**                           changed.
**     @param
**         ModeChangeCallbackParamPtr 
**                           - Pointer to callback parameter to notify
**                           the upper layer once a mode has been
**                           changed.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - The component is disabled
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_PARAM_MODE - Invalid operation mode
**                           ERR_BUSY - A job is pending
*/
/* ===================================================================*/
LDD_TError SDHC1_SetOperationMode(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr);

/*
** ===================================================================
**     Method      :  SDHC1_GetDriverState (component SDHC_LDD)
*/
/*!
**     @brief
**         This method returns the current driver status.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by Init method. 
**     @return
**                         - 
**                           The current driver status mask. The
**                           following status masks defined in PE_Types.h
**                           can be used to check the current driver
**                           status:
**                           PE_LDD_DRIVER_DISABLED_IN_CLOCK_CONFIGURATIO
**                           N - Driver is disabled in the current clock
**                           configuration
**                           PE_LDD_DRIVER_DISABLED_BY_USER - Driver is
**                           disabled by the user
**                           PE_LDD_DRIVER_BUSY - Driver is in the BUSY
**                           state
*/
/* ===================================================================*/
LDD_TDriverState SDHC1_GetDriverState(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SDHC1_Interrupt (component SDHC_LDD)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {FreeRTOS RTOS Adapter} ISR function prototype */
PE_ISR(SDHC1_Interrupt);

/* END SDHC1 */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __SDHC1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
