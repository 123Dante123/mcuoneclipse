/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : FATM1.h
**     Project     : FRDM-K64F_Zork
**     Processor   : MK64FN1M0VLQ12
**     Component   : FatFsMemSDHC
**     Version     : Component 01.044, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-12-02, 21:22, # CodeGen: 12
**     Abstract    :
**
**     Settings    :
**
**     Contents    :
**         CardPresent      - bool FATM1_CardPresent(void);
**         isWriteProtected - bool FATM1_isWriteProtected(void);
**         Activate         - void FATM1_Activate(void);
**         Deactivate       - void FATM1_Deactivate(void);
**         Deinit           - uint8_t FATM1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         Init             - uint8_t FATM1_Init(LDD_TUserData *UserDataPtr);
**
** License   :  Open Source (LGPL)
** Copyright : (c) Copyright Erich Styger, 2013-2018, all rights reserved.
** Web       : www.mcuoneclipse.com
** 
** This an open source software using Processor Expert.
** This is a free software and is opened for education,  research and commercial developments under license policy of following terms:
** * This is a free software and there is NO WARRANTY.
** * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
** * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file FATM1.h
** @version 01.00
** @brief
**
*/         
/*!
**  @addtogroup FATM1_module FATM1 module documentation
**  @{
*/         

#ifndef __FATM1_H
#define __FATM1_H

/* MODULE FATM1. */
/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "SDHC1.h"
#include "CD1.h"
#include "TMOUT1.h"
#include "WAIT1.h"

#include "Cpu.h"

#define FATM1_CONFIG_DISABLE_MPU   (1)
  /*!< For the Kinetis K64F, the MPU has to be disabled for SDHC to work! */

/* interface for FatFS low level disk functions */
#include "diskio.h"

DSTATUS FATM1_disk_initialize (
        uint8_t drv                     /* Physical drive number (0..) */
);
DSTATUS FATM1_disk_status (
        uint8_t drv                     /* Physical drive number (0..) */
);
DRESULT FATM1_disk_read (
        uint8_t drv,                    /* Physical drive number (0..) */
        uint8_t *buff,                  /* Data buffer to store read data */
        uint32_t sector,                /* Sector address (LBA) */
        uint8_t count                   /* Number of sectors to read (1..255) */
);
#if _READONLY == 0
DRESULT FATM1_disk_write (
        uint8_t drv,                    /* Physical drive number (0..) */
        const uint8_t *buff,            /* Data to be written */
        uint32_t sector,                /* Sector address (LBA) */
        uint8_t count                   /* Number of sectors to write (1..255) */
);
#endif
DRESULT FATM1_disk_ioctl (
        uint8_t drv,                    /* Physical drive number (0..) */
        uint8_t ctrl,                   /* Control code */
        void *buff                      /* Buffer to send/receive control data */
);

typedef struct {
  LDD_TDeviceData *SDHCPtr;     /* SDHC component data */
  bool Finished;                /* Operation end indication */
  bool Inserted;                /* Card insertion indication */
  uint8_t CardId;               /* Initialized card ID */
  LDD_SDHC_TCardInfo CardInfo;  /* Initialized card info */
} TSDData;

#define FATM1_BLOCK_SIZE        512   /* sector size. Values >512 give LDD_SDHC_ERR_BLOCK_LEN_ERROR? So hardcoded for now. */
#define FATM1_WAIT_TIMEOUT_MS   1024  /* wait timeout in millis seconds for commands */




void SDHC1_OnCardInserted(LDD_TUserData *UserDataPtr, uint8_t Id);

void SDHC1_OnCardRemoved(LDD_TUserData *UserDataPtr, uint8_t Id);

void SDHC1_OnFinished(LDD_TUserData *UserDataPtr);

bool FATM1_CardPresent(void);
/*
** ===================================================================
**     Method      :  CardPresent (component FatFsMemSDHC)
**
**     Description :
**         Returns TRUE if card is present
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t FATM1_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  Init (component FatFsMemSDHC)
**
**     Description :
**         Initialization method
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to RTOS structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t FATM1_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  Deinit (component FatFsMemSDHC)
**
**     Description :
**         Method to deinitialize the device driver
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Pointer to RTOS
**                           structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void FATM1_Activate(void);
/*
** ===================================================================
**     Method      :  Activate (component FatFsMemSDHC)
**
**     Description :
**         Activates the communication channel
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void FATM1_Deactivate(void);
/*
** ===================================================================
**     Method      :  Deactivate (component FatFsMemSDHC)
**
**     Description :
**         Deactivates the communication channel
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

bool FATM1_isWriteProtected(void);
/*
** ===================================================================
**     Method      :  isWriteProtected (component FatFsMemSDHC)
**
**     Description :
**         Returns TRUE if card is write protected
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

/* END FATM1. */

#endif
/* ifndef __FATM1_H */
/*!
** @}
*/
