/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : TSL1.h
**     Project     : tinyK22_SGP30
**     Processor   : MK22FN512VLH12
**     Component   : TSL2561
**     Version     : Component 01.002, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-10-01, 18:28, # CodeGen: 9
**     Abstract    :
**
**     Settings    :
**
**     Contents    :
**         Disable                - uint8_t TSL1_Disable(void);
**         Enable                 - uint8_t TSL1_Enable(void);
**         SetIntegrationTime     - uint8_t TSL1_SetIntegrationTime(uint8_t timing);
**         SetGain                - uint8_t TSL1_SetGain(uint8_t gain);
**         ReadRawDataFull        - uint8_t TSL1_ReadRawDataFull(uint16_t *data);
**         ReadRawDataInfrared    - uint8_t TSL1_ReadRawDataInfrared(uint16_t *data);
**         ReadData               - uint8_t TSL1_ReadData(uint16_t *broadband, uint16_t *ir);
**         CalculateLux           - uint32_t TSL1_CalculateLux(uint16_t broadband, uint16_t ir);
**         GetLux                 - uint8_t TSL1_GetLux(uint32_t *lux);
**         GetLuminosity          - void TSL1_GetLuminosity(uint16_t *broadband, uint16_t *ir);
**         LuxToAmbientPercentage - void TSL1_LuxToAmbientPercentage(uint32_t luxVal, uint8_t *ambient);
**         ParseCommand           - uint8_t TSL1_ParseCommand(const unsigned char* cmd, bool *handled, const...
**         Deinit                 - void TSL1_Deinit(void);
**         Init                   - void TSL1_Init(void);
**
** * Copyright (c) 2017, Erich Styger
**  * Web:         https://mcuoneclipse.com
**  * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**  * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**  * All rights reserved.
**  *
**  * Redistribution and use in source and binary forms, with or without modification,
**  * are permitted provided that the following conditions are met:
**  *
**  * - Redistributions of source code must retain the above copyright notice, this list
**  *   of conditions and the following disclaimer.
**  *
**  * - Redistributions in binary form must reproduce the above copyright notice, this
**  *   list of conditions and the following disclaimer in the documentation and/or
**  *   other materials provided with the distribution.
**  *
**  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE..com
** ###################################################################*/
/*!
** @file TSL1.h
** @version 01.00
** @brief
**
*/         
/*!
**  @addtogroup TSL1_module TSL1 module documentation
**  @{
*/         

#ifndef __TSL1_H
#define __TSL1_H

/* MODULE TSL1. */
#include "MCUC1.h" /* SDK and API used */
#include "TSL1config.h" /* configuration */

#if TSL1_CONFIG_PARSE_COMMAND_ENABLED
  #include "CLS1.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#define TSL1_PARSE_COMMAND_ENABLED    TSL1_CONFIG_PARSE_COMMAND_ENABLED
  /*!< set to 1 if method ParseCommand() is present, 0 otherwise */

#define TSL2561_LUX_SATURATED_VALUE  0x10000  /* special lux value in case sensor is saturated */

#define TSL2561_GAIN_1X                 0x00  // no gain
#define TSL2561_GAIN_16X                0x10  // 16x gain
#define TSL2561_INTEGRATION_TIME_13MS   0  // 13.7ms
#define TSL2561_INTEGRATION_TIME_101MS  1  // 101ms
#define TSL2561_INTEGRATION_TIME_402MS  2  // 402ms



void TSL1_Deinit(void);
/*
** ===================================================================
**     Method      :  Deinit (component TSL2561)
**
**     Description :
**         Driver de-initialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void TSL1_Init(void);
/*
** ===================================================================
**     Method      :  Init (component TSL2561)
**
**     Description :
**         Driver Initialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

uint8_t TSL1_Disable(void);
/*
** ===================================================================
**     Method      :  Disable (component TSL2561)
**
**     Description :
**         Disables the device
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t TSL1_Enable(void);
/*
** ===================================================================
**     Method      :  Enable (component TSL2561)
**
**     Description :
**         Enables the device
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t TSL1_ParseCommand(const unsigned char* cmd, bool *handled, const CLS1_StdIOType *io);
/*
** ===================================================================
**     Method      :  ParseCommand (component TSL2561)
**
**     Description :
**         Shell Command Line parser. Method is only available if Shell
**         is enabled in the component properties.
**     Parameters  :
**         NAME            - DESCRIPTION
**         cmd             - command string
**       * handled         - Pointer to variable which tells if
**                           the command has been handled or not
**         io              - Pointer to I/O structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t TSL1_SetIntegrationTime(uint8_t timing);
/*
** ===================================================================
**     Method      :  SetIntegrationTime (component TSL2561)
**
**     Description :
**         Sets the sensor integration time
**     Parameters  :
**         NAME            - DESCRIPTION
**         timing          - integration timing
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t TSL1_SetGain(uint8_t gain);
/*
** ===================================================================
**     Method      :  SetGain (component TSL2561)
**
**     Description :
**         Sets the sensor gain
**     Parameters  :
**         NAME            - DESCRIPTION
**         gain            - gain value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t TSL1_ReadRawDataFull(uint16_t *data);
/*
** ===================================================================
**     Method      :  ReadRawDataFull (component TSL2561)
**
**     Description :
**         Read the raw full/broadband light data value
**     Parameters  :
**         NAME            - DESCRIPTION
**       * data            - Pointer to where to store the data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t TSL1_ReadRawDataInfrared(uint16_t *data);
/*
** ===================================================================
**     Method      :  ReadRawDataInfrared (component TSL2561)
**
**     Description :
**         Read the raw infrared light data value
**     Parameters  :
**         NAME            - DESCRIPTION
**       * data            - Pointer to where to store the data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t TSL1_ReadData(uint16_t *broadband, uint16_t *ir);
/*
** ===================================================================
**     Method      :  ReadData (component TSL2561)
**
**     Description :
**         Read the broadband/full and infrared data
**     Parameters  :
**         NAME            - DESCRIPTION
**       * broadband       - Pointer to where to store the
**                           data
**       * ir              - Pointer to store the infrared value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint32_t TSL1_CalculateLux(uint16_t broadband, uint16_t ir);
/*
** ===================================================================
**     Method      :  CalculateLux (component TSL2561)
**
**     Description :
**         Calculates the LUX value based on broadband and infrared
**         values
**     Parameters  :
**         NAME            - DESCRIPTION
**         broadband       - full/broadband light value
**         ir              - Infrared value
**     Returns     :
**         ---             - LUX value
** ===================================================================
*/

void TSL1_GetLuminosity(uint16_t *broadband, uint16_t *ir);
/*
** ===================================================================
**     Method      :  GetLuminosity (component TSL2561)
**
**     Description :
**         Gets the broadband (mixed lighting) and IR only values from
**         the TSL2561, adjusting gain if auto-gain is enabled
**     Parameters  :
**         NAME            - DESCRIPTION
**       * broadband       - Pointer to where to store the
**                           broadband value
**       * ir              - Pointer to store the infrared value
**     Returns     : Nothing
** ===================================================================
*/

uint8_t TSL1_GetLux(uint32_t *lux);
/*
** ===================================================================
**     Method      :  GetLux (component TSL2561)
**
**     Description :
**         Returns the sensor value in LUX
**     Parameters  :
**         NAME            - DESCRIPTION
**       * lux             - Pointer to where to store the Lux value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void TSL1_LuxToAmbientPercentage(uint32_t luxVal, uint8_t *ambient);
/*
** ===================================================================
**     Method      :  LuxToAmbientPercentage (component TSL2561)
**
**     Description :
**         Transformes the Lux value into an ambient percentage value
**         (0-100%)
**     Parameters  :
**         NAME            - DESCRIPTION
**         luxVal          - Lux input value
**       * ambient         - Pointer to where to store the
**                           ambient percentage value
**     Returns     : Nothing
** ===================================================================
*/

/* END TSL1. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __TSL1_H */
/*!
** @}
*/
