-d__SRB_BOARD__=
-e537 // ignore message for repeated include file
+libh(Cpu.h, Events.h)


//    co-mwhc08.lnt
//    Compiler Options for Freescale HC08 Compiler

//    This file contains options to allow PC-lint to process source
//    files for your compiler.  It is used as follows:
//
//    lint  co-mwhc08.lnt  source-file(s)
//

// inherit from basis hc compiler option file common options
//    co-mwe_base.lnt
//    Compiler Options for Freescale MWE Compiler (Basis Option File)

//    This file contains options to allow PC-lint to process source
//    files for your compiler.  It is used as follows:
//
//    lint  co-mwe_base.lnt  source-file(s)
//

// asm
-d_asm=asm                      // Accepts both "_asm" and "asm"
-d__asm=asm                     // Accepts both "__asm" and "asm"
-dasm=_to_semi +rw(_to_semi)    // Accepts #define macroname {asm CMD;}
+pragma(asm,off)                // #asm blocks ignored
+pragma(endasm,on)              // #endasm restores things
-dasm=_to_brackets              // Ignore asm { ... }
+rw(_to_brackets)

// @ support
-ident1(@)
+rw(_to_brackets)
-d"@=_to_brackets "

// #warning support
//+ppw(warning)                 // Ignore #warning
-ppw_asgn(warning, error)       // Map #warning to an error

// special reserved words
+rw(__typeof__)
-dinterrupt=
-d__interrupt=

// macros
-emacro(64, NULL)                // Accepts ptrs to void/unvoid
-emacro(???, va_arg)             // The va_arg() macro can yield 415, 416, 661,
                                 // 662, 796 and 797 (out-of-bounds errors).

// While processing compiler (library) header files ...
-wlib(1)    // Sets the warning level within library headers to 1
            // (no warnings, just syntax errors).  Comment out if you
            // are actually linting library headers.  This
            // option makes obsolete options of the form -elib(axxx) where
            // xxx >= 400 which may be retained for historical reasons.
-elib(652)  // Suppress message about #define of earlier declared symbols
-elib(762)  // Suppress message about multiple identical declarations and
-elib(760)  // Suppress message about multiple identical macro defs
-elib(553)  // Undefined pre-processor variables are regarded as 0 without complaint

// We allow non-ints to be used for bitfields
-e46

//  The following functions exhibit variable return modes.
//  That is, they may equally-usefully be called for a value
//  as called just for their effects.  Accordingly we inhibit
//  Warning 534 for these functions.
//  Feel free to add to or subtract from this list.
-esym(534, memcpy, memmove, memset)                // mem functions
-esym(534, puts, scanf, sprintf, sscanf)           // String functions
-esym(534, strcat, strcpy, strncat, strncpy)       // String functions
-esym(534, printf)                                 // Others


// NOTE: this configuration is for the default compiler settings

//-cwh        // allow for @far and @hex-constant
-e625       // we allow far/near for local/auto variables

-fcu        // plain character is signed
-sc1        // sizeof(char) is 1
-fcu        // char is unsigned
-ss2        // sizeof(short) is 2
-si2        // sizeof(int) is 2
-sl4        // sizeof(long) is 4
-sll4       // sizeof(long) is 4
-sf4        // sizeof(float) is 4
-sd4        // sizeof(double) is 4
-sld4       // sizeof(long double) is 4

-spN1       // sizeof(near pointer) is 1
-spF2       // sizeof(far pointer) is 2


-d__RESET_WATCHDOG()=    // is defined with HLI in derivative header file: ignore it

// ## the following defines are defined internally in the compiler.
// ## you can create the information below with the compiler option -Ldf
// ## which produces a header file with the needed information.
-d__STDC__=0
//-d__VERSION__=5015          // identifies the compiler version
//-d__VERSION_STR__="V-5.0.15"      // identifies the compiler version
-d__BITFIELD_LSBIT_FIRST__=
-d__BITFIELD_MSBYTE_FIRST__=
-d__BITFIELD_MSWORD_FIRST__=
-d__BITFIELD_TYPE_SIZE_REDUCTION__=
-d__SMALL__=
-d__HC08__=
-d__PTR_SIZE_2__=
-d__HC08_ICG__=
-d__FLOAT_IS_IEEE32__=
-d__DOUBLE_IS_IEEE32__=
-d__LONG_DOUBLE_IS_IEEE32__=
-d__LONG_LONG_DOUBLE_IS_IEEE32__=
-d__CHAR_IS_UNSIGNED__=
-d__CHAR_IS_8BIT__=
-d__SHORT_IS_16BIT__=
-d__INT_IS_16BIT__=
-d__ENUM_IS_32BIT__=
-d__LONG_IS_32BIT__=
-d__LONG_LONG_IS_32BIT__=
-d__SIZE_T_IS_UINT__=
-d__PTRDIFF_T_IS_INT__=
-d__ENUM_IS_UNSIGNED__=
-d__VTAB_DELTA_IS_16BIT__=
-d__WCHAR_T_IS_UCHAR__=
-d__PTRMBR_OFFSET_IS_16BIT__=
-d__PLAIN_BITFIELD_IS_SIGNED__=
-d__ELF_OBJECT_FILE_FORMAT__=
-d__PRODUCT_HICROSS_PLUS__=
-d__HIWARE__=
-d__ARCHIMEDES__=
-d__MWERKS__=1
-d__OPTIMIZE_FOR_SIZE__=
-d__BIG_ENDIAN__=

