/*!
\page page_LED Lab: LED
\author Erich Styger, erich.styger@hslu.ch

\section s_requirement Requirements
We have to implement an LED driver controlling our LEDs in the system.
Do it both for the Tower and for the SRB port.
Following functionality shall be supported:
- LEDx_On(): turn on LED x
- LEDx_Off(): turn off LED x
- LEDx_Neg(): toggle LED x
- LEDx_Get(): get the status (on or off) of LED x
- LEDx_Put(): set the status (on or off) of LED x

\section s_hints Hints
- Create the initial set of files for your project:
  - Application.c, Application.h
  - LED.c, LED.h
  - Platform.c, Platform.h
- The LED driver is in LED.h and LED.c
- The SRB is using following pins: 
\verbatim
LED1 [Output]            => PTD4_TPM2CH1 [48]
LED2 [Output]            => PTD5_TPM2CH2 [49]
LED3 [Output]            => PTD6_TPM2CH3 [50]
LED4 [Output]            => PTD7_TPM2CH4 [51]
LED5 [Output]            => PTC4 [16]
\endverbatim
- The Tower is using following pins: 
\verbatim
LED1 [Output]            => DTIN0_DTOUT0_PWM0_PTC0 [11]
LED2 [Output]            => DTIN1_DTOUT1_PWM2_PTC1 [12]
LED3 [Output]            => DTIN2_DTOUT2_PWM4_PTC2 [65]
LED4 [Output]            => DTIN3_DTOUT3_PWM6_PTC3 [19]
\endverbatim
- Use macros for maximum flexibility in your LED driver
- Implement a LED test driver to verify correct operation of the driver
- Document your solution in the sources
- Have fun :-)  

\section s_learn Things to learn
- Adding BitIO components for LEDs, naming pin signals
- Setting properties, enabling/disabling methods
- Init value different (LED on/off)
- Naming components gives prefix (across projects)
- Creation of source/header file through wizard
- Configuring system through -D to platform.h
- Keep sources warning free

\section s_journal Questions
- We are using macro/inlined version of our LED methods. What would be the advantage using normal methods/functions instead?
- Your driver needs to deal differntly with the LEDs on the SRB board and the Tower board. What is the reason for this?
*/