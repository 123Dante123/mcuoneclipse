/*!
\page page_Events Lab: Events
\author Erich Styger, erich.styger@hslu.ch

\section s_requirement Requirements
We create a simple event handler. The goal is that we can record events and process them later 
(e.g. an interrupt routine may set the event for a button pressed).
We will need this later for our keyboard handling or generic system events.

\section s_hints Hints
- Create Event.c/Event.h and integrate them.
- Implement the methods to add/clear/check an event.
- Do not forget to call your event initialization method from PL_Init().
- Add an first event EVNT_INIT which is used to show your system startup with LED's.
  For example you could flash your LEDs.
- Think about reentrancy: be aware that an interrupt can happen any time with their consequences.
- You can use EnterCritical() and ExitCritical() in your application.
  Study them and learn what they do. You will need them to make your code reentrant.
  You need to think about your system behaviour (when are interrupts enabled? When can other processes
  access your global variables?)
- Make sure you have your new version of the application documented properly with doxygen
- Have fun :-)  

\section s_journal Journal Questions
- Right now we support up to 256 events. That's usuall enough. How would you change your implementation to support more than 256 events?
- What are the pros/cons of the current implementation?
- You might think that EnterCritical() just should disable interrupts, while ExitCritical() would simply
  re-enabling them. You might have seen such implementations. However, we are using here a more complex
  way. Could you list the reasons why we are NOT using the simple enable/disable interrupt way?
*/
