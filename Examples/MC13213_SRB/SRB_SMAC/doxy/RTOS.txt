/*!
\page page_RTOS Lab: RTOS
\author Erich Styger, erich.styger@hslu.ch

\section s_requirement Requirements
We are going to add an RTOS (Real Time Operating System) to our project.
For this we are using the FreeRTOS (www.freeRTOS.org).

\section s_hints Hints
- Implement RTOS.c with RTOS.h as interface
- Configure a 10 ms tick timer and a 1 ms performance tick timer.
- For both platform, configure the SWI (software interrupt/exception) handler vector
- For the ColdFire Tower CPU, make sure you are not using overlapping main/subpriorities for interrupts
- Create your first task: your new main loop
- Call RTOS_Run() from your application and move the previous (non-RTOS) 'main loop' functionality to it
- Verify that your application is still working
- You can replace your previous 10 ms timer interrupt with the RTOS tick interrupt
- You shall get RTOS status information (task information and performance information) from the shell 'status' command.
  Do not forget to set the RTOS in your FSShell component.
- Have fun :-)  

\section s_journal Questions
- Why can you replace your previous 10 ms timer interrupt with the RTOS tick?
- What is the difference between vTaskDelayUntil() and vTaskDelay()?
*/
