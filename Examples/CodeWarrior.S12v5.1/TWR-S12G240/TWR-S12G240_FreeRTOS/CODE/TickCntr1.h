/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : TickCntr1.h
**     Project     : TWR_S12G240_FreeRTOS
**     Processor   : MC9S12G240CLL
**     Component   : FreeCntr
**     Version     : Component 01.115, Driver 01.14, CPU db: 3.00.010
**     Compiler    : CodeWarrior HC12 C Compiler
**     Date/Time   : 04.09.2018, 14:00
**     Abstract    :
**         This device "FreeCntr" implements a free running counter for
**         time measurement.
**     Settings    :
**         Timer name                  : TIM_Counter (16-bit)
**         Compare name                : TC0
**         Counter shared              : No
**
**         High speed mode
**             Prescaler               : divide-by-1
**             Clock                   : 6250000 Hz
**           Period
**             Xtal ticks              : 10000
**             microseconds            : 10000
**             milliseconds            : 10
**             seconds (real)          : 0.01
**             Hz                      : 100
**           Frequency of counting (Bus clock / prescaler)
**             Hz                      : 6250000
**
**         Initialization:
**              Timer                  : Disabled
**
**         Timer registers
**              Counter                : TCNT      [$0044]
**              Mode                   : TIOS      [$0040]
**              Run                    : TSCR1     [$0046]
**              Prescaler              : TSCR2     [$004D]
**              Compare                : TC0       [$0050]
**
**         Interrupt name              : Vtimch0
**         Priority                    : 1
**         User handling procedure     : TickCntr1_OnInterrupt
**         This event is called when the counter is reinitialized
**     Contents    :
**         Enable          - byte TickCntr1_Enable(void);
**         Disable         - byte TickCntr1_Disable(void);
**         GetCounterValue - byte TickCntr1_GetCounterValue(TickCntr1_TTimerValue *Value);
**         SetCompare      - void TickCntr1_SetCompare(TickCntr1_TTimerValue Value);
**
**Copyright : 1997 - 2011 Freescale Semiconductor, Inc. All Rights Reserved.
**
**http      : www.freescale.com
**mail      : support@freescale.com
** ###################################################################*/
/*!
** @file TickCntr1.h
** @version 01.14
** @brief
**         This device "FreeCntr" implements a free running counter for
**         time measurement.
*/         
/*!
**  @addtogroup TickCntr1_module TickCntr1 module documentation
**  @{
*/         

#ifndef __TickCntr1
#define __TickCntr1

/* MODULE TickCntr1. */

#include "Cpu.h"


#pragma CODE_SEG TickCntr1_CODE

#define TickCntr1_TTimerValue word     /* This type represents counter or compare value, width depends on timer width */

#define TickCntr1_PERIOD_VALUE 0xF424UL /* Initial period value in ticks of the timer */
#define TickCntr1_PRESCALER_VALUE 0x01U /* Initial prescaler value of the timer */
#define TickCntr1_COUNTER_INPUT_CLOCK_HZ 0x005F5E10UL /* Initial counter input clock frequency [Hz] */
#define TickCntr1_TIMER_INPUT_CLOCK 0x005F5E10UL /* Deprecated. Initial timer input clock value [Hz] */
#define TickCntr1_UP_COUNTER 1U        /* The timer counts upwards */
/* High speed mode constants */
#define TickCntr1_PERIOD_VALUE_HIGH 0xF424UL /* Initial period value in ticks of the timer in high speed mode */
#define TickCntr1_PRESCALER_VALUE_HIGH 0x01U /* Initial prescaler value of the timer in high speed mode */
#define TickCntr1_COUNTER_INPUT_CLOCK_HZ_HIGH 0x005F5E10UL /* Counter input clock frequency in high speed mode [Hz] */
#define TickCntr1_TIMER_INPUT_CLOCK_HIGH 0x005F5E10UL /* Deprecated. Timer input clock value [Hz] in high speed mode */

byte TickCntr1_Enable(void);
/*
** ===================================================================
**     Method      :  TickCntr1_Enable (component FreeCntr)
**
**     Description :
**         This method enables the component, i.e. timer is enabled and
**         the internal clocks are counted. The method usually also
**         reset the counter (if it is supported by HW). 
**         The method is not available if the counter is shared.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte TickCntr1_Disable(void);
/*
** ===================================================================
**     Method      :  TickCntr1_Disable (component FreeCntr)
**
**     Description :
**         This method disables the component, i.e. timer is disabled
**         and the internal clocks are stopped. Last counter value is
**         usually preserved in the counter (if it is supported by HW).
**         The method is not available if the counter is shared.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define TickCntr1_GetCounterValue(PValue) \
  /*lint -save  -e926 -e927 -e928 -e929 Disable MISRA rule (11.4) checking. */\
  ((*(TickCntr1_TTimerValue*)(PValue) = TCNT), \
  ERR_OK) \
  /*lint -restore Enable MISRA rule (11.4) checking. */
/*
** ===================================================================
**     Method      :  TickCntr1_GetCounterValue (component FreeCntr)
**
**     Description :
**         This method returns a content of the counter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Value           - Pointer to returned value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define TickCntr1_SetCompare(Value) ( \
  TC0 = Value                          /* Store given value to the compare register */ \
)
/*
** ===================================================================
**     Method      :  TickCntr1_SetCompare (component FreeCntr)
**
**     Description :
**         This method sets the appropriate compare/modulo/reload
**         register. The method is available only when compare, modulo
**         or reload register is selected in the <Device> property. 
**         [Note:]This is low level method, value written using this
**         method is discarded when changing active speed-mode.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Value           - This value is stored to compare
**                           register.
**     Returns     : Nothing
** ===================================================================
*/

void TickCntr1_Init(void);
/*
** ===================================================================
**     Method      :  TickCntr1_Init (component FreeCntr)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG __NEAR_SEG NON_BANKED
__interrupt void TickCntr1_Interrupt(void);
#pragma CODE_SEG TickCntr1_CODE
/*
** ===================================================================
**     Method      :  TickCntr1_Interrupt (component FreeCntr)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG DEFAULT

/* END TickCntr1. */

#endif /* ifndef __TickCntr1 */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.03 [04.46]
**     for the Freescale HCS12 series of microcontrollers.
**
** ###################################################################
*/
